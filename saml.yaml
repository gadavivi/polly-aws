AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  S3Bucket:
    Type: String
    Description: "Amazon S3 bucket for AWS artifacts"
Resources:
  PollyMp3S3:
    Type: AWS::S3::Bucket
  WebsiteS3:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
    DeletionPolicy: Retain
  S3WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteS3
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${WebsiteS3}/*"
            Principal: "*"
  MyAPI:
   Type: AWS::Serverless::Api
   Properties:
      StageName: prod
      DefinitionBody:
          'Fn::Transform':
            Name: 'AWS::Include'
            Parameters:
              Location: !Sub "s3://${S3Bucket}/swagger.yaml"
  posts:                   
     Type: AWS::Serverless::SimpleTable
     Properties:
       PrimaryKey:
         Name: id
         Type: String
       ProvisionedThroughput:
         ReadCapacityUnits: 5
         WriteCapacityUnits: 5
  SNSTopic1:
    Type: 'AWS::SNS::Topic'
  LambdaRule:
    Description: Allowing Lambda function to access all relevant services
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-lambda-rule"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  LambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn: LambdaRule
    Description: Setting IAM policy for LambdaRule role
    Properties:
      PolicyName: !Sub "${AWS::StackName}-lambda-policy"
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
          Resource: ["*"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["dynamodb:Query","dynamodb:Scan","dynamodb:PutItem","dynamodb:UpdateItem"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["polly:SynthesizeSpeech"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["s3:GetBucketLocation", "s3:PutObject", "s3:PutObjectAcl"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["sns:Publish"]
      Roles: [!Ref LambdaRule]
  PostReaderGetPosts:
    Type: 'AWS::Serverless::Function'
    DependsOn: LambdaRule
    Properties:
      Handler: get_post.lambda_handler
      Runtime: python2.7
      CodeUri: src
      Description: Gets all posts from our dynamo DB table
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaRule.Arn
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPI
            Path: /
            Method: GET
      Environment:
        Variables:
            DB_TABLE_NAME: !Ref posts
  PostReaderNewPost:
    Type: 'AWS::Serverless::Function'
    DependsOn: LambdaRule
    Properties:
      Handler: new_post.lambda_handler
      Runtime: python2.7
      CodeUri: src
      Description: add a new post to the db
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaRule.Arn
      Events:
        Api2:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPI
            Path: /
            Method: POST
      Environment:
        Variables:
            DB_TABLE_NAME: !Ref posts
            SNS_TOPIC: !Ref SNSTopic1
  PostReaderConvertToAudio:
        Type: 'AWS::Serverless::Function'
        DependsOn: LambdaRule
        Properties:
          Handler: convert_to_video.lambda_handler
          Runtime: python2.7
          CodeUri: src
          Description: Converts my text to audio files and saves to s3
          MemorySize: 128
          Timeout: 300
          Role: !GetAtt LambdaRule.Arn
          Events:
            SNS1:
              Type: SNS
              Properties:
                Topic:
                  Ref: SNSTopic1
          Environment:
            Variables:
              BUCKET_NAME: !Ref PollyMp3S3
              DB_TABLE_NAME: !Ref posts
Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref MyAPI
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/prod'